// https://school.programmers.co.kr/learn/courses/30/lessons/42895

function solution(N, number) {
  // 중복값을 방지하기 위해 Set 사용
  const dp = Array.from({ length: 9 }, () => new Set());

  for (let i = 1; i < 9; i++) {
    // 연속된 숫자 넣기
    // 5 , 55 ,555 , 5555 , ...
    dp[i].add(Number(N.toString().repeat(i)));
  }

  for (let i = 1; i < 9; i++) {
    for (let j = 1; j < i; j++) {
      for (let x of dp[j]) {
        for (let y of dp[i - j]) {
          dp[i].add(x + y); // 더하기
          dp[i].add(x - y); // 뺴기
          dp[i].add(x * y); // 곱하기
          // 나누기 ( 나머지는 버림 )
          if (y !== 0) dp[i].add(Math.floor(x / y));
        }
      }
    }
    // 찾고 있는 숫자가 포함되어 있는지
    if (dp[i].has(number)) {
      return i;
    }
  }
  return -1;
}

// dp 값 i < 4
// Set(0) {},
// Set(1) { 5 },
// Set(5) { 55, 10, 0, 25, 1 },
// Set(18) {
//   555,
//   60,
//   -50,
//   275,
//   0,
//   15,
//   -5,
//   50,
//   5,
//   30,
//   -20,
//   125,
//   6,
//   4,
//   11,
//   2,
//   20,
//   -4
// },

// 탐색 i < 4
// x - 5 (1) , y - 5 (1) , i - 2)
// x - 5 (1) , y - 55 (2) , i - 3)
// x - 5 (1) , y - 10 (2) , i - 3)
// x - 5 (1) , y - 0 (2) , i - 3)
// x - 5 (1) , y - 25 (2) , i - 3)
// x - 5 (1) , y - 1 (2) , i - 3)
// x - 55 (2) , y - 5 (1) , i - 3)
// x - 10 (2) , y - 5 (1) , i - 3)
// x - 0 (2) , y - 5 (1) , i - 3)
// x - 25 (2) , y - 5 (1) , i - 3)
// x - 1 (2) , y - 5 (1) , i - 3)

// ++ 탐색 i < 5
// x - 5 (1) , y - 555 (3) , i - 4)
// x - 5 (1) , y - 60 (3) , i - 4)
// x - 5 (1) , y - -50 (3) , i - 4)
// x - 5 (1) , y - 275 (3) , i - 4)
// x - 5 (1) , y - 0 (3) , i - 4)
// x - 5 (1) , y - 15 (3) , i - 4)
// x - 5 (1) , y - -5 (3) , i - 4)
// x - 5 (1) , y - 50 (3) , i - 4)
// x - 5 (1) , y - 5 (3) , i - 4)
// x - 5 (1) , y - 30 (3) , i - 4)
// x - 5 (1) , y - -20 (3) , i - 4)
// x - 5 (1) , y - 125 (3) , i - 4)
// x - 5 (1) , y - 6 (3) , i - 4)
// x - 5 (1) , y - 4 (3) , i - 4)
// x - 5 (1) , y - 11 (3) , i - 4)
// x - 5 (1) , y - 2 (3) , i - 4)
// x - 5 (1) , y - 20 (3) , i - 4)
// x - 5 (1) , y - -4 (3) , i - 4)
// x - 55 (2) , y - 55 (2) , i - 4)
// x - 55 (2) , y - 10 (2) , i - 4)
// x - 55 (2) , y - 0 (2) , i - 4)
// x - 55 (2) , y - 25 (2) , i - 4)
// x - 55 (2) , y - 1 (2) , i - 4)
// x - 10 (2) , y - 55 (2) , i - 4)
// x - 10 (2) , y - 10 (2) , i - 4)
// x - 10 (2) , y - 0 (2) , i - 4)
// x - 10 (2) , y - 25 (2) , i - 4)
// x - 10 (2) , y - 1 (2) , i - 4)
// x - 0 (2) , y - 55 (2) , i - 4)
// x - 0 (2) , y - 10 (2) , i - 4)
// x - 0 (2) , y - 0 (2) , i - 4)
// x - 0 (2) , y - 25 (2) , i - 4)
// x - 0 (2) , y - 1 (2) , i - 4)
// x - 25 (2) , y - 55 (2) , i - 4)
// x - 25 (2) , y - 10 (2) , i - 4)
// x - 25 (2) , y - 0 (2) , i - 4)
// x - 25 (2) , y - 25 (2) , i - 4)
// x - 25 (2) , y - 1 (2) , i - 4)
// x - 1 (2) , y - 55 (2) , i - 4)
// x - 1 (2) , y - 10 (2) , i - 4)
// x - 1 (2) , y - 0 (2) , i - 4)
// x - 1 (2) , y - 25 (2) , i - 4)
// x - 1 (2) , y - 1 (2) , i - 4)
// x - 555 (3) , y - 5 (1) , i - 4)
// x - 60 (3) , y - 5 (1) , i - 4)
// x - -50 (3) , y - 5 (1) , i - 4)
// x - 275 (3) , y - 5 (1) , i - 4)
// x - 0 (3) , y - 5 (1) , i - 4)
// x - 15 (3) , y - 5 (1) , i - 4)
// x - -5 (3) , y - 5 (1) , i - 4)
// x - 50 (3) , y - 5 (1) , i - 4)
// x - 5 (3) , y - 5 (1) , i - 4)
// x - 30 (3) , y - 5 (1) , i - 4)
// x - -20 (3) , y - 5 (1) , i - 4)
// x - 125 (3) , y - 5 (1) , i - 4)
// x - 6 (3) , y - 5 (1) , i - 4)
// x - 4 (3) , y - 5 (1) , i - 4)
// x - 11 (3) , y - 5 (1) , i - 4)
// x - 2 (3) , y - 5 (1) , i - 4)
// x - 20 (3) , y - 5 (1) , i - 4)
// x - -4 (3) , y - 5 (1) , i - 4)
