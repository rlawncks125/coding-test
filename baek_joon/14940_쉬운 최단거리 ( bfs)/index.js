// https://www.acmicpc.net/problem/14940

// 로컬 node index.js시 경로
const fs = require("fs");
const input = fs.readFileSync("./input.txt").toString().trim().split("\n");

// 백준 제출시 경로
// const input = fs.readFileSync("/dev/stdin").toString().trim().split("\n");

const [n, m] = input[0].split(" ").map(Number);

const array = [];

for (let i = 1; i < input.length; i++) {
  array.push([...input[i].replaceAll(" ", "")]);
}

const visited = Array.from({ length: n }, () => Array(m).fill(-1));
const direc = [
  [0, 1],
  [1, 0],
  [0, -1],
  [-1, 0],
];

const queue = [];

// 목표 지점(2) 찾기 && 갈수 없는땅 0 표시
for (let i = 0; i < n; i++) {
  for (let j = 0; j < m; j++) {
    if (+array[i][j] === 0) {
      visited[i][j] = 0;
    }
    if (+array[i][j] === 2) {
      visited[i][j] = 0;
      queue.push([i, j]);
    }
  }
}

// bfs
while (queue.length > 0) {
  const [x, y] = queue.shift();

  for (const [dx, dy] of direc) {
    const nx = x + dx;
    const ny = y + dy;

    if (
      // 범위
      nx >= 0 &&
      ny >= 0 &&
      nx < n &&
      ny < m &&
      //
      visited[nx][ny] === -1 &&
      +array[nx][ny] === 1
    ) {
      visited[nx][ny] = visited[x][y] + 1;
      queue.push([nx, ny]);
    }
  }
}

// dfs 방식
// function dfs(x, y) {
//   for (const [dx, dy] of direc) {
//     const nx = x + dx;
//     const ny = y + dy;

//     if (
//       // 범위
//       nx >= 0 &&
//       ny >= 0 &&
//       nx < n &&
//       ny < m &&
//       //
//       visited[nx][ny] === -1 &&
//       +array[nx][ny] === 1
//     ) {
//       visited[nx][ny] = visited[x][y] + 1;
//       dfs(nx, ny);
//     }
//   }
// }

// const [x, y] = queue.shift();
// dfs(x, y);

visited.forEach((v) => {
  console.log(...v);
});

// 출력 #########################################

// bfs
// 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
// 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
// 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
// 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
// 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
// 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
// 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
// 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
// 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
// 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
// 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
// 11 12 13 14 15 16 17 18 19 20 0 0 0 0 25
// 12 13 14 15 16 17 18 19 20 21 0 29 28 27 26
// 13 14 15 16 17 18 19 20 21 22 0 30 0 0 0
// 14 15 16 17 18 19 20 21 22 23 0 31 32 33 34

// dfs ( direc 방향에 따라 출력 값이 다름)
// 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
// 191 192 193 194 195 196 197 198 199 200 201 202 203 204 15
// 190 189 188 187 186 185 184 183 182 181 180 179 178 177 16
// 163 164 165 166 167 168 169 170 171 172 173 174 175 176 17
// 162 161 160 159 158 157 156 155 154 153 152 151 150 149 18
// 135 136 137 138 139 140 141 142 143 144 145 146 147 148 19
// 134 133 132 131 130 129 128 127 126 125 124 123 122 121 20
// 107 108 109 110 111 112 113 114 115 116 117 118 119 120 21
// 106 105 104 103 102 101 100 99 98 97 96 95 94 93 22
// 79 80 81 82 83 84 85 86 87 88 89 90 91 92 23
// 78 77 76 75 74 73 72 71 70 29 28 27 26 25 24
// 61 62 63 64 65 66 67 68 69 30 0 0 0 0 25
// 60 59 58 57 56 55 54 53 52 31 0 29 28 27 26
// 43 44 45 46 47 48 49 50 51 32 0 30 0 0 0
// 42 41 40 39 38 37 36 35 34 33 0 31 32 33 34
